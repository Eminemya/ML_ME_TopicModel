#include <stdio.h>
#include <stdlib.h>
#include "util_crf.c"


void main(){
    int i;
double a[10]={10.2500  , 20.3300  , 30.4200  , 40.4100  , 50.4900 ,  60.5300,   70.5700  , 80.6100 ,  90.6800 , 100.7100};
    for(i=0;i<10;i++){
    printf("%f, ",psi(a[i])-psi(a[i]-(i+1)*10));
    }

   }

/**/
/*
#define swap(x,y,type) { \
      type temp; \
      temp = *x;\
      *x = *y; \
      *y = temp;\
}
void quicksort(double list[],int ind[],int m,int n) {
    int key,i,j,k;
    if( m < n) {
        k = (int)(m+n)/2;
        swap(&list[m],&list[k],double);
        swap(&ind[m],&ind[k],int);
        key = list[m];
        i = m+1;
        j = n;
        while(i <= j) {
            while((i <= n) && (list[i] <= key))
                i++;
            while((j >= m) && (list[j] > key))
                j--;
            if( i < j) {
                swap(&list[i],&list[j],double);
                swap(&ind[i],&ind[j],int);
                }
            }
        // swap two elements
        swap(&list[m],&list[j],double);
        swap(&ind[m],&ind[j],int);
        // recursively sort the lesser list
        quicksort(list,ind,m,j-1);
        quicksort(list,ind,j+1,n);
        }
    }
void printlist(double list[],int ind[],int n) {
    int i;
    for(i=0; i<n; i++)
        printf("%d,%f\t",ind[i],list[i]);
    }

void main() {
    const int MAX_ELEMENTS = 10;
    double list[MAX_ELEMENTS];
    int ind[MAX_ELEMENTS];
    int i = 0;

    // generate random numbers and fill them to the list
    for(i = 0; i < MAX_ELEMENTS; i++ ) {
        list[i] = (double)rand()/1000000;
        ind[i] = i;
        }
    printf("The list before sorting is:\n");
    printlist(list,ind,MAX_ELEMENTS);

    // sort the list using quicksort
    quicksort(list,ind,0,MAX_ELEMENTS-1);

    // print the result
    printf("The list after sorting using quicksort algorithm:\n");
    printlist(list,ind,MAX_ELEMENTS);
    }

void main() {
    int n[10];
    double eta[11];
    int i = 0;
    for(i = 0; i < 10; i++ ) {
        n[i] = (i+1)*10;
        eta[i+1] = 0.5;
        }
    
	SearchLambda(n,eta,10);
printf("don....");
 
}
*/
